import os, sys, threading, time
from collections import deque
import re, json, shortuuid 

import telebot
from telebot import types

from report import create_pdf
from googletrans import Translator

from my_db import get_current_state, get_db_fild, set_db_fild
from my_db import get_db_list, clr_db_list, app_db_list

from prompts import Gens, SD_Gens
from ChatGPT import ChatGPT
from SD_api import gen_image

#while True:
#    time.sleep(1)

TIMER = 20 

q = deque()
print('inits OK...')

if len(sys.argv)>1:
    token = sys.argv[1]
else:
    token = os.getenv('TG_TOKEN')
    if not token: 
        print('bot token needed...')
        quit()

if len(sys.argv)>2:
    api_key = sys.argv[2]
else:
    api_key = os.getenv('OPENAI_KEY')
    if not api_key: 
        print('openai api_key needed...')
        quit()

def apply_first_arg(func, first_arg):
    def wrapper(*args, **kwargs):
        return func(first_arg, *args, **kwargs)
    return wrapper

PROXY = '192.168.1.200:3128' # you must set proxy there... 
chat = ChatGPT(api_key, PROXY)
bot = telebot.TeleBot(token)
translator = Translator()

re_phase_data = re.compile(r'\[(\d)/(\d)[ ,]*(\d{,2})/10\]')
re_clear = re.compile(r'\[[^\]]*\]')

#my = re.compile(r'\w+')

@bot.message_handler(commands=['help','start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–ù–∞—á–∞–ª–∏!', callback_data="start")
    markup.add(btn)
    bot.reply_to(message, ''''–≠—Ç–æ –∫–≤–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç *Game Master*, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–æ-–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–µ–ª–ª. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –≤–ª–∏—è—Ç—å –Ω–∞ —Å—é–∂–µ—Ç, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–æ–º –∏–ª–∏ —Ñ–µ–Ω—Ç–µ–∑–∏–π–Ω–æ–º –º–∏—Ä–µ. –í –¥–∞–Ω–Ω–æ–º –∫–≤–µ—Å—Ç–æ–≤–æ–º –¥–≤–∏–∂–∫–µ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∏–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫, –∫—Ä–æ–º–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π (—Ç.–µ. –Ω–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π _–∂–∏–∑–Ω–µ–π_, _—É—Ä–æ–Ω–∞_, _–±—Ä–æ–Ω–∏_ –∏ —Ç–ø), –¥–∞–∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–∏–ø–∞ _—Ö–∞—Ä–∏–∑–º—ã_ *(chr)*, _—Å–∏–ª—ã_ *(str)* –∏ _–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç_ *(int)* - —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –∑–∞–¥–µ–ª –Ω–∞ –±—É–¥—É—â–µ–µ. –ó–∞—Ç–æ –ø–æ–ª–µ—Ç –≤–∞—à–µ–π —Ñ–∞–Ω—Ç–∞–∑–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –º–∞–ª–æ. ü§≠ 

 –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é, –≤–∞–º –Ω—É–∂–Ω–æ _—Å–æ–∑–¥–∞—Ç—å_ *–º–∏—Ä (—Å–µ—Ç—Ç–∏–Ω–≥)* –∏ *–≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è*. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–µ–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:

 üé≤ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ –¥–µ–ª–æ –±–æ—Ç—É. –û–Ω —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ –∫–∞–∫–æ–π-—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–µ—Ç—Ç–∏–Ω–≥ –∏/–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.

 ‚úèÔ∏è - –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏—Ä–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –ª–µ–≥–µ–Ω–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–∞–º–∏ (—Ç–æ–≥–¥–∞ –±–æ—Ç –ø–æ —Å—É—Ç–∏ —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é). 

 üé≠ - –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∫–ª—é—á–µ–≤—ã–µ/–≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –±–æ—Ç—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç. 
 
 –ú–æ–∂–Ω–æ —Å–æ—á–µ—Ç–∞—Ç—å —ç—Ç–∏ —Å–ø–æ—Å–æ–±—ã –¥–ª—è —Å–µ—Ç—Ç–∏–Ω–≥–∞/–≥–µ—Ä–æ—è –≤ –ª—é–±—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö. 
 
 –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ *—Ä–µ–∂–∏–º –∫–≤–µ—Å—Ç–∞*. –î–∞–Ω–Ω—ã–µ —Ä–µ–∂–∏–º –µ—â–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—ã—Ä–æ–π, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ _–∞–∫–∫—É—Ä–∞—Ç–Ω–æ_. üòä

–ü–æ –∑–∞–¥—É–º–∫–µ –±–æ—Ç —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç –æ—Ç 3 –¥–æ 6 —Å—Ü–µ–Ω, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≤—è–∑–∫–∏, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–µ–π. –ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∞—à–∏ (—Ç.–µ. –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è) –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏—Ö –≤ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ. –ü–æ –º–µ—Ä–µ —Ä–∞–∑–≤–∏—Ç–∏—è —Å—é–∂–µ—Ç–µ —Ä–∞—Å—Ç–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ü–µ–Ω—ã –∏ –∫–æ–≥–¥–∞ –æ–Ω –¥–æ—Ö–æ–¥–∏—Ç –¥–æ 10 - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É. 

–í–∞–∂–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω—é–∞–Ω—Å: –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω—ã *–≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å* –Ω–µ–±–æ–ª—å—à–æ–π –±–ª–æ–∫ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –≤–∏–¥–∞ *[1/3,4/10]* (_–≠—Ç–æ –∑–Ω–∞—á–∏—Ç –ø–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞ –∏–∑ —Ç—Ä–µ—Ö, –ø—Ä–æ–≥—Ä–µ—Å—Å 4 –∏–∑ 10_). –ï—Å–ª–∏ –≤—ã –Ω–µ –≤–∏–¥–∏—Ç–µ —Ç–∞–∫–æ–≥–æ –±–ª–æ–∫–∞, –∏–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ (—Ö–æ—Ç—è –ø–µ—Ä–≤—ã–º –±—É–¥–µ—Ç –≤–∑—è—Ç —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç —Ä–∞–Ω—å—à–µ), –∏–ª–∏ –Ω–æ–º–µ—Ä —Å—Ü–µ–Ω—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, –∞ —Ç–∞–∫ –∂–µ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤–∞–º –ø—Ä–æ—Å—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å—Ü–µ–Ω–∞ –∏/–∏–ª–∏ –µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ - –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–ø—Ü–∏–µ–π üé≤ *–ï—â–µ —Ä–∞–∑*.  –¢–∞–∫ –∂–µ, —Å –º–æ–º–µ–Ω—Ç–∞, –∫–∞–∫ –≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ —Å–µ—Ç—Ç–∏–Ω–≥–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å üìï *–ñ—É—Ä–Ω–∞–ª* —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ *—Ñ–æ—Ä–º–∞—Ç–µ pdf*.

_–ö–æ–º–∞–Ω–¥—ã /start –∏ /help –≤–µ—Ä–Ω—É—Ç –≤–∞—Å –∫ —ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É –∏ —Å–±—Ä–æ—Å—è—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –≤—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç)_

*–•–æ—Ä–æ—à–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!* üôã‚Äç‚ôÇÔ∏è''', reply_markup=markup, parse_mode='MARKDOWN')


@bot.callback_query_handler(func=lambda call: True)
def start(call):
    if call.data == "start":
        message = call.message
        scene_img = []
        for i in range(6):
            scene_img.append(shortuuid.uuid())    
        set_db_fild(message.chat.id,'setting_img',shortuuid.uuid())
        set_db_fild(message.chat.id,'hero_img',shortuuid.uuid())
        set_db_fild(message.chat.id,'scene_img',json.dumps(scene_img))
        state_send(message.chat.id,'S_START')


@bot.message_handler(content_types=['text'])
def message_deque(message):
    q.append(message)

#--------------------- Send section ------------------------

def send_setting(chat_id,sett, ru_sett=None):
    set_db_fild(chat_id,'setting',sett)
    prompt = SD_Gens.sett(sett)
    ans = chat.answer(prompt)
    img = gen_image(ans, {'height':480,'width':640})
    f_name = get_db_fild(chat_id, 'setting_img')
    with open('./images/'+f_name, 'wb') as f:
        f.write(img)
    ru_trl = ru_sett if ru_sett else translator.translate(sett,dest='ru').text
    set_db_fild(chat_id,'ru_sett',ru_trl)
    bot.send_photo(chat_id, img, caption=ru_trl[:1024])


def send_hero(chat_id,sett,hero, ru_hero=None):
    set_db_fild(chat_id,'hero',hero)
    prompt = SD_Gens.hero(sett,hero)
    hero_sd = chat.answer(prompt)
    print(hero_sd)
    img = gen_image(hero_sd, {'height':300,'width':300})
    f_name = get_db_fild(chat_id, 'hero_img')
    with open('./images/'+f_name, 'wb') as f:
        f.write(img)
    prompt = Gens.stats(hero)
    exp = chat.answer(prompt)
    atrs = exp.split(', ')
    set_db_fild(chat_id,'hero_name', atrs[0])
    for atr in atrs[1:]:
        at  = atr.split('=')
        set_db_fild(chat_id,at[0],at[1])
    ru_trl = ru_hero if ru_hero else translator.translate(hero,dest='ru').text    
    set_db_fild(chat_id,'ru_hero',ru_trl)
    bot.send_photo(chat_id, img, caption=f'{ru_trl[:1000]} \[*{exp}*]', parse_mode="Markdown")


def send_quest(chat_id,scene,f_name):
    sett = get_db_fild(chat_id,'setting')
    prompt = SD_Gens.scene(sett,scene)
    scene_sd = chat.answer(prompt)
    print(scene_sd)
    img = gen_image(scene_sd, {'height':480,'width':640})
    with open('./images/'+f_name, 'wb') as f:
        f.write(img)
    ru_trl = translator.translate(scene,dest='ru').text    
    bot.send_photo(chat_id, img, caption=ru_trl[:1000]+' <b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è?</b>', parse_mode="HTML")


def quest_roll(chat_id, r=0):
    sett = get_db_fild(chat_id,'setting')
    hero = get_db_fild(chat_id,'hero')
    scene = get_db_list(chat_id,'scene_ls')[-1]
    gms = get_db_list(chat_id,'GM_ans')
    acts = get_db_list(chat_id, 'pl_act')
    q = len(gms) - gms.index(scene) 
    scene_num = get_db_fild(chat_id,'curent_scene')
    if scene_num == '1':
        scene = None
    max_scene_num = get_db_fild(chat_id,'max_scene')
    #_progress = get_db_fild(chat_id,'progress')
    chr_ = get_db_fild(chat_id,'chr')
    str_ = get_db_fild(chat_id,'str')
    int_ = get_db_fild(chat_id,'int')
    prompt = Gens.quest_roll(sett, hero, chr_, str_, int_, scene, acts, scene_num, max_scene_num, q, gms)
    ans = chat.answer(prompt)
    ans = re.sub(r'[\{\}]','',ans)
    try:
        cur_scene, max_scene, progress = tuple(map(int, re_phase_data.findall(ans)[-1])) 
        if not int(scene_num) == cur_scene:
            print(cur_scene, max_scene, progress)
            time.sleep(TIMER)
            if r<3:
                quest_roll(chat_id, r+1)
            else: 
                #bot.send_message(message.chat.id, f'cur_scene {cur_scene},max_scene {max_scene}, progress {progress}')
                bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...')
                main_phase(message.chat.id,None if str(scene_num)=="1" else scene_num)
            return
    except Exception as e:
        print(e)
        time.sleep(TIMER)
        if r<3:
            quest_roll(chat_id, r+1)
        else: 
            #bot.send_message(message.chat.id, f'{ans} #{e}')
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...')
            main_phase(message.chat.id,None if str(scene_num)=="1" else scene_num)
        return
    ans = re_clear.sub('',ans)+f' [{cur_scene}/{max_scene},{progress}/10]'
    app_db_list(message.chat.id,'GM_ans', ans)
    set_db_fild(message.chat.id,'curent_scene',cur_scene)
    set_db_fild(message.chat.id,'max_scene',max_scene)
    set_db_fild(message.chat.id,'progress',progress)
    if progress>=10:
        bot.send_message(message.chat.id, translator.translate(ans,dest='ru').text+' <b>–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å—é–∂–µ—Ç–∞...</b>', parse_mode="HTML")
        if cur_scene == max_scene:
            bot.send_message(message.chat.id, 'üßô‚Äç‚ôÇÔ∏è –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π!ü§ù –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—Ä—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∏ —Ä–∞–∑–¥–µ–ª –¥–æ–±—ã—á–∏!üí∞üí∞üí∞', parse_mode="HTML")
        else:
            time.sleep(TIMER)
            main_phase(message.chat.id, next_scene=str(cur_scene+1))    
    else:
        bot.send_message(message.chat.id, translator.translate(ans,dest='ru').text+' <b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è?</b>', parse_mode="HTML")

#-------------------- Utils section ------------------------

def main_phase(chat_id,next_scene=None,r=0):
    print(f'scene {next_scene if next_scene else "1"}') 
    if next_scene:
        sett = get_db_fild(chat_id,'setting')
        hero = get_db_fild(chat_id,'hero')
        gms = get_db_list(chat_id,'GM_ans')
        acts = get_db_list(chat_id, 'pl_act')
        q = len(gms) - gms.index(get_db_list(chat_id,'scene_ls')[-1]) 
        #summa = '' if next_scene == '2' else get_db_fild(chat_id,'summa')
        prompt = Gens.summa(sett, hero, gms, acts, q, re_clear)
        #summa = summa+'\n\n'+chat.answer(prompt); 
        summa = chat.answer(prompt); 
        print(summa)
        scene_num = next_scene
        prompt = Gens.quest_ns(sett, hero,
                                get_db_fild(chat_id,'chr'),
                                get_db_fild(chat_id,'str'),
                                get_db_fild(chat_id,'int'),
                                scene_num,
                                get_db_fild(chat_id,'max_scene'),
                                summa)
    else:
        prompt = Gens.quest(get_db_fild(chat_id,'setting'),
                            get_db_fild(chat_id,'hero'),
                            get_db_fild(chat_id,'chr'),
                            get_db_fild(chat_id,'str'),
                            get_db_fild(chat_id,'int'))
        scene_num = "1"
    ans = chat.answer(prompt)
    ans = re.sub(r'[\{\}]','',ans) 
    try:
        cur_scene, max_scene, progress = tuple(map(int, re_phase_data.findall(ans)[-1]))
        im_name = get_db_list(chat_id,'scene_img')[cur_scene-1]
    except Exception as e:
        print(ans,e)
        time.sleep(TIMER)
        if r<3:
            main_phase(chat_id,None if str(scene_num)=="1" else scene_num,r+1)
        else:
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ê–¥–º–∏–Ω –ø–æ—á–∏–Ω–∏—Ç. –ü–æ–∑–∂–µ... –ù–∞–≤–µ—Ä–Ω–æ–µ... ü§ó')    
        return
    ans = re_clear.sub('',ans)+f' [{cur_scene}/{max_scene},{progress}/10]'
    if next_scene:
        app_db_list(chat_id,'GM_ans', ans)
        app_db_list(chat_id,'scene_ls', ans)
        set_db_fild(chat_id,'summa',summa)
    else:
        clr_db_list(chat_id,'GM_ans', ans)
        clr_db_list(chat_id,'scene_ls', ans)
        clr_db_list(chat_id,'pl_act')
    set_db_fild(chat_id,'curent_scene',cur_scene)
    set_db_fild(chat_id,'max_scene',max_scene)
    set_db_fild(chat_id,'progress',progress)
    send_quest(message.chat.id,ans,im_name)


def game_card(chat_id):
    f_name = shortuuid.uuid()
    create_pdf(f"./game_cards/{f_name}.pdf",
                get_db_fild(chat_id, 'ru_sett'), 
                get_db_fild(chat_id, 'hero_name'), 
                f'''–•–∞—Ä–∏–∑–º–∞:{get_db_fild(chat_id, 'chr')},
                    –°–∏–ª–∞:{get_db_fild(chat_id, 'str')},
                    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {get_db_fild(chat_id, 'int')}
                 ''', 
                get_db_fild(chat_id, 'ru_hero'), 
                get_db_fild(chat_id, 'summa'), 
                get_db_fild(chat_id, 'setting_img'),
                get_db_fild(chat_id, 'hero_img'),
                translator,
                get_db_list(chat_id, 'GM_ans'),
                get_db_list(chat_id, 'pl_act'),
                get_db_list(chat_id, 'scene_ls'),
                get_db_list(chat_id, 'scene_img'),
            )            
    with open(f"./game_cards/{f_name}.pdf","rb") as misc:
        bot.send_document(chat_id,misc)    


def roll_back_scene(chat_id):
    last = get_db_list(chat_id,'scene_ls')[-1]
    new_scene_ls = get_db_list(chat_id,'scene_ls')[:-1]
    gm = get_db_list(chat_id,'GM_ans')
    new_gm = gm[:gm.index(last)]
    pl_act = get_db_list(chat_id, 'pl_act')
    new_pl_act = pl_act[:len(new_gm)-len(new_scene_ls)]
    set_db_fild(chat_id,'scene_ls',json.dumps(new_scene_ls))
    set_db_fild(chat_id,'GM_ans',json.dumps(new_gm))
    set_db_fild(chat_id,'pl_act',json.dumps(new_pl_act))


def debug_mesage(message):
    bot.send_message(message.chat.id, f'State:[{get_current_state(message.chat.id)}], command:[{message.text}]')


def get_txt_mkp(state):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if state == 'S_START':
        markup.add( types.KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π"),
                    types.KeyboardButton("üé≠ –î–æ–ø–æ–ª–Ω–∏..."),
                    types.KeyboardButton("‚úèÔ∏è –°–∞–º –æ–ø–∏—à—É..."))
        return ' '.join('''üßô‚Äç‚ôÇÔ∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥—Ä—É–≥ –º–æ–π. –Ø –ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã, –∏ —è –ø—Ä–æ–≤–µ–¥—É —Ç–µ–±—è —á–µ—Ä–µ–∑ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ! 
                        –°–∫–∞–∂–∏, —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø—Ä–∏–¥—É–º–∞–ª —Å–µ—Ç—Ç–∏–Ω–≥ –¥–ª—è –∏–≥—Ä—ã, –∏–ª–∏ —ç—Ç–æ —Å–¥–µ–ª–∞–µ—à—å —Ç—ã?'''.split()), markup
    elif state == 'S_GEN_HERO':
        markup.add( types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                    types.KeyboardButton("üé≠ –î–æ–ø–æ–ª–Ω–∏"),
                    types.KeyboardButton("‚úèÔ∏è –Ø —Å–∞–º!"),
                    types.KeyboardButton("üé≤ –°–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!"))
        return ' '.join('''üßô‚Äç‚ôÇÔ∏è –ß—Ç–æ –∂, —ç—Ç–æ—Ç –º–∏—Ä –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–ø–ª–æ—Ö–æ, –∫–∞–∫ –¥—É–º–∞–µ—à—å? ü§î –ü–æ—Ä–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≥–µ—Ä–æ—è. 
                        –¢—ã —Å–∞–º –µ–≥–æ –æ–ø–∏—à–µ—à—å, –∏–ª–∏ –º–Ω–µ? –í–ø—Ä–æ—á–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –º–∏—Ä?'''.split()), markup
    elif state == 'S_SELECT_QST':    
        markup.add( types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                    types.KeyboardButton("‚öúÔ∏è –í–ø–µ—Ä–µ–¥!"),
                    types.KeyboardButton("üìï –ñ—É—Ä–Ω–∞–ª"))
        return "üßô‚Äç‚ôÇÔ∏è –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≥–µ—Ä–æ–π... –û—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ? ü§≠ –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∂–¥—É—Ç —Ç–µ–±—è!", markup
    elif state == 'S_IN_QUEST':
        markup.add( types.KeyboardButton("üÜï –í –Ω–∞—á–∞–ª–æ"),
                    types.KeyboardButton("üé≤ Reroll"),
                    types.KeyboardButton("üìï –ñ—É—Ä–Ω–∞–ª"))
        return "üßô‚Äç‚ôÇÔ∏è –í–ø–µ—Ä–µ–¥ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! ‚öîÔ∏è–ì–æ—Ç–æ–≤—å—Å—è...", markup


def state_send(chat_id, state):
    set_db_fild(chat_id,'state',state)
    txt, markup = get_txt_mkp(state) 
    bot.send_message(chat_id, txt, reply_markup=markup)

#--------------------- Main section ------------------------

if __name__ == '__main__':
    threading.Thread(target=bot.infinity_polling, name='bot_infinity_polling', daemon=True).start()
    while True:
        if q:
            message = q.popleft()
            state = get_current_state(message.chat.id)
            if state == 'S_START':
                if message.text == 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π':
                    send_setting(message.chat.id, chat.answer(Gens.sett()))
                    state_send(message.chat.id,'S_GEN_HERO')
                elif message.text == 'üé≠ –î–æ–ø–æ–ª–Ω–∏...':
                    set_db_fild(message.chat.id,'state','S_COMBO_SETT')
                    bot.send_message(message.chat.id, 'üßô‚Äç‚ôÇÔ∏è –•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –∞ —è —Ä–∞–∑–æ–≤—å—é —Ç–µ–º—É.üí´')
                elif message.text == '‚úèÔ∏è –°–∞–º –æ–ø–∏—à—É...':
                    set_db_fild(message.chat.id,'state','S_ENTER_SETT')
                    bot.send_message(message.chat.id, 'üßô‚Äç‚ôÇÔ∏è –•–æ—Ä–æ—à–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –≤ –∫–∞–∫–æ–º –º–∏—Ä–µ –Ω–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.üåè')
                else:
                    _, markup = get_txt_mkp(state) 
                    bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏. ü§≠", reply_markup=markup)                   
            elif state == 'S_COMBO_SETT':
                prompt = Gens.sett(translator.translate(message.text).text)
                send_setting(message.chat.id,chat.answer(prompt))
                state_send(message.chat.id,'S_GEN_HERO')
            elif state == 'S_ENTER_SETT':
                en_txt = translator.translate(message.text).text
                send_setting(message.chat.id, en_txt, message.text)   
                state_send(message.chat.id,'S_GEN_HERO')
            elif state == 'S_GEN_HERO':
                if message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
                    state_send(message.chat.id,'S_START')
                elif message.text == 'üé≤ –°–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!':
                    sett = get_db_fild(message.chat.id,'setting')
                    send_hero(message.chat.id,sett,chat.answer(Gens.hero(sett)))
                    state_send(message.chat.id,'S_SELECT_QST')
                elif message.text == 'üé≠ –î–æ–ø–æ–ª–Ω–∏':
                    set_db_fild(message.chat.id,'state','S_COMBO_HERO')
                    bot.send_message(message.chat.id, 'üßô‚Äç‚ôÇÔ∏è –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–≤–æ–¥–Ω—ã–µ, –∫–∞–∫–æ–π –æ–Ω? üë®üèª‚Äçüé§ –Ø –ø–æ–¥—Ö–≤–∞—á—É! ')                
                elif message.text == '‚úèÔ∏è –Ø —Å–∞–º!':
                    set_db_fild(message.chat.id,'state','S_ENTER_HERO')
                    bot.send_message(message.chat.id, 'üßô‚Äç‚ôÇÔ∏è –•–æ—Ä–æ—à–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.üé≠ –ù–µ–∑–∞–±—É–¥—å –ø—Ä–æ –∏–º—è!')
                else:
                    _, markup = get_txt_mkp(state) 
                    bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏. ü§≠", reply_markup=markup)
            elif state == 'S_COMBO_HERO':
                sett = get_db_fild(message.chat.id,'setting')
                prompt = Gens.hero(sett, translator.translate(message.text).text)
                send_hero(message.chat.id,sett,chat.answer(prompt))
                state_send(message.chat.id,'S_SELECT_QST')
            elif state == 'S_ENTER_HERO':
                en_txt = translator.translate(message.text).text
                sett = get_db_fild(message.chat.id, 'setting')
                send_hero(message.chat.id, sett, en_txt, message.text)  
                state_send(message.chat.id,'S_SELECT_QST')
            elif state == 'S_SELECT_QST':
                if message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
                    state_send(message.chat.id,'S_GEN_HERO')
                elif message.text == '‚öúÔ∏è –í–ø–µ—Ä–µ–¥!':
                    state_send(message.chat.id,'S_IN_QUEST')
                    main_phase(message.chat.id)
                elif message.text == 'üìï –ñ—É—Ä–Ω–∞–ª':
                    game_card(message.chat.id)
                else:
                    _, markup = get_txt_mkp(state) 
                    bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏. ü§≠", reply_markup=markup)
            elif state == 'S_IN_QUEST':
                if message.text == 'üÜï –í –Ω–∞—á–∞–ª–æ':
                    set_db_fild(message.chat.id,'curent_scene', 1)
                    state_send(message.chat.id,'S_START')
                elif message.text == 'üé≤ Reroll':
                    sc = get_db_fild(message.chat.id,'curent_scene')
                    if len(get_db_list(message.chat.id,'scene_ls'))>=int(sc):
                        roll_back_scene(message.chat.id)
                    main_phase(message.chat.id, None if sc=="1" else sc)
                elif message.text == 'üìï –ñ—É—Ä–Ω–∞–ª':
                    game_card(message.chat.id)
                else:
                    app_db_list(message.chat.id, 'pl_act', translator.translate(message.text).text)
                    quest_roll(message.chat.id)                        
            else:
                debug_mesage(message)
        else:
           time.sleep(1)
